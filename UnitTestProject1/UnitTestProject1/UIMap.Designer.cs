// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UnitTestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            BrowserWindow uIWorkingInternetExploWindow = this.UIWorkingInternetExploWindow;
            #endregion

            // Go to web page 'http://bing.com/'
            BrowserWindow.Launch(new System.Uri(this.RecordedMethod1Params.UIWorkingInternetExploWindowUrl));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIWorkingInternetExploWindow UIWorkingInternetExploWindow
        {
            get
            {
                if ((this.mUIWorkingInternetExploWindow == null))
                {
                    this.mUIWorkingInternetExploWindow = new UIWorkingInternetExploWindow();
                }
                return this.mUIWorkingInternetExploWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIWorkingInternetExploWindow mUIWorkingInternetExploWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://bing.com/'
        /// </summary>
        public string UIWorkingInternetExploWindowUrl = "http://bing.com/";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWorkingInternetExploWindow : BrowserWindow
    {
        
        public UIWorkingInternetExploWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Working...";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Working...");
            this.WindowTitles.Add("MSW Home Page");
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("Bing");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIAddressComboControlToolBar UIAddressComboControlToolBar
        {
            get
            {
                if ((this.mUIAddressComboControlToolBar == null))
                {
                    this.mUIAddressComboControlToolBar = new UIAddressComboControlToolBar(this);
                }
                return this.mUIAddressComboControlToolBar;
            }
        }
        
        public UIAddressBarClient UIAddressBarClient
        {
            get
            {
                if ((this.mUIAddressBarClient == null))
                {
                    this.mUIAddressBarClient = new UIAddressBarClient(this);
                }
                return this.mUIAddressBarClient;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressComboControlToolBar mUIAddressComboControlToolBar;
        
        private UIAddressBarClient mUIAddressBarClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAddressComboControlToolBar : WinToolBar
    {
        
        public UIAddressComboControlToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Address Combo Control";
            this.WindowTitles.Add("Working...");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAddressMenuItem
        {
            get
            {
                if ((this.mUIAddressMenuItem == null))
                {
                    this.mUIAddressMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAddressMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Address";
                    this.mUIAddressMenuItem.WindowTitles.Add("Working...");
                    #endregion
                }
                return this.mUIAddressMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAddressMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAddressBarClient : WinClient
    {
        
        public UIAddressBarClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Address Bar";
            this.WindowTitles.Add("Working...");
            this.WindowTitles.Add("MSW Home Page");
            this.WindowTitles.Add("Blank Page");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddressandsearchusinEdit
        {
            get
            {
                if ((this.mUIAddressandsearchusinEdit == null))
                {
                    this.mUIAddressandsearchusinEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddressandsearchusinEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Address and search using ";
                    this.mUIAddressandsearchusinEdit.WindowTitles.Add("Working...");
                    #endregion
                }
                return this.mUIAddressandsearchusinEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddressandsearchusinEdit;
        #endregion
    }
}
